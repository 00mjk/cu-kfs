/*
 * The Kuali Financial System, a comprehensive financial management system for higher education.
 *
 * Copyright 2005-2020 Kuali, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.kuali.kfs.fp.batch.service;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kuali.kfs.fp.businessobject.GeneralLedgerTransferEntry;
import org.kuali.kfs.fp.document.GeneralLedgerTransferDocument;
import org.kuali.kfs.fp.document.dataaccess.GeneralLedgerTransferDocumentDao;
import org.kuali.kfs.fp.document.dataaccess.GeneralLedgerTransferEntryDao;
import org.kuali.kfs.krad.service.BusinessObjectService;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class GeneralLedgerTransferUpdateEntriesService {
    private static final Logger LOG = LogManager.getLogger(GeneralLedgerTransferUpdateEntriesService.class);

    private BusinessObjectService businessObjectService;
    private GeneralLedgerTransferDocumentDao generalLedgerTransferDocumentDao;
    private GeneralLedgerTransferEntryDao generalLedgerTransferEntryDao;

    /**
     * Returns GLT documents that should be processed.
     * @return GLT documents that have a null batchProcessedDate and are in workflow approved status
     */
    public List<GeneralLedgerTransferDocument> findDocuments() {
        List<GeneralLedgerTransferDocument> gltDocumentsToActOn = generalLedgerTransferDocumentDao.findDocumentsByNullBatchProcessedDateAndApproved();
        LOG.info("findDocuments: found " + gltDocumentsToActOn.size() + " GLT edocs with null batch processing date and Approved status.");
        
        return generalLedgerTransferDocumentDao.findDocumentsByNullBatchProcessedDateAndApproved();
    }

    /**
     * Looks for the GL Entries generated by the source accounting lines of the document passed in and sets the
     * generalLedgerTransferDocumentNumber. Then sets the batchProcessedDate on the GLT document.
     * @param generalLedgerTransferDocument to process
     */
    @Transactional
    public void processDocument(GeneralLedgerTransferDocument generalLedgerTransferDocument) {
        final String gltDocumentNumber = generalLedgerTransferDocument.getDocumentNumber();
        LOG.info("Processing GLT document=" + gltDocumentNumber);

        List<GeneralLedgerTransferEntry> entriesToProcess =
            generalLedgerTransferEntryDao.findGeneratedEntriesByGeneralLedgerTransferSourceAccountingLines(
                generalLedgerTransferDocument.getSourceAccountingLines());
        List<GeneralLedgerTransferEntry> entriesToSave = new ArrayList<>();

        LOG.info("processDocument: found " + entriesToProcess.size() + " generated entries by GLT From accounting lines.");
        for (GeneralLedgerTransferEntry gltEntry : entriesToProcess) {
            if (StringUtils.isEmpty(gltEntry.getGeneralLedgerTransferDocumentNumber())) {
                gltEntry.setGeneralLedgerTransferDocumentNumber(gltDocumentNumber);
                entriesToSave.add(gltEntry);
                LOG.info("processDocument: setGeneralLedgerTransferDocumentNumber to gltDocumentNumber = " + gltDocumentNumber + "=");
            } else {
                LOG.warn("Skipped Entry that already had generalLedgerTransferDocumentNumber set ("
                    + gltEntry.getGeneralLedgerTransferDocumentNumber() + "). " + gltEntry.toString());
            }
        }

        if (entriesToSave.isEmpty()) {
            LOG.warn("Skipped GLT Document=" + gltDocumentNumber + " that had no eligible entries");
        } else {
            businessObjectService.save(entriesToSave);

            generalLedgerTransferDocument.setBatchProcessedDate(new Timestamp(new Date().getTime()));
            businessObjectService.save(generalLedgerTransferDocument);
            
            LOG.info("processDocument: SAVED data to entries");
        }
    }

    public void setBusinessObjectService(BusinessObjectService businessObjectService) {
        this.businessObjectService = businessObjectService;
    }

    public void setGeneralLedgerTransferDocumentDao(GeneralLedgerTransferDocumentDao generalLedgerTransferDocumentDao) {
        this.generalLedgerTransferDocumentDao = generalLedgerTransferDocumentDao;
    }

    public void setGeneralLedgerTransferEntryDao(GeneralLedgerTransferEntryDao generalLedgerTransferEntryDao) {
        this.generalLedgerTransferEntryDao = generalLedgerTransferEntryDao;
    }
}
