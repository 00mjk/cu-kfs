<?xml version="1.0" encoding="UTF-8"?>
<!--
 spring-rice-startup extension context which overrides JTA-related application beans with Bitronix definitions.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

  <!-- Define Bitronix TX manager and override default beans in spring-jta.xml -->

  <!-- bitronix sets up singletons, so it's not injected into the PoolingDataSource -->
  <bean id="btmConfig" factory-method="getConfiguration" class="bitronix.tm.TransactionManagerServices">
    <!-- Spring does not like these properties because the are non-beans-compliant setters.  Values stashed in bitronix-default-config.properties for now.
         see: http://forum.springsource.org/showthread.php?54791-Original-must-not-be-null-failed-to-convert-property-value-of-type
         <property name="serverId" value="spring-btm" />
         <property name="disableJmx" value="true" />
    -->
  </bean>

  <bean id="bitronix" factory-method="getTransactionManager"
        class="bitronix.tm.TransactionManagerServices" depends-on="btmConfig, dataSource, serverDatasource" destroy-method="shutdown" />

  <!-- something is attempting to use the tx manager as a factory bean (probably assuming JOTM)
       implementing this hacky workaround to make the delinquent code happy -->
  <bean id="bitronix-factory" class="org.springframework.beans.factory.config.BeanReferenceFactoryBean">
    <property name="targetBeanName" value="bitronix"/>
  </bean>

  <!-- alias bitronix to jotm; KEN and KCB are referring to this bean name -->
  <alias name="bitronix-factory" alias="jotm"/>
  <!-- already registered as aliases for jotm:
  <alias name="bitronix-factory" alias="jtaTransactionManager"/>
  <alias name="bitronix-factory" alias="jtaUserTransaction"/>
  -->
  
  <!-- Define Bitronix datasource, overriding KFS datasource bean defined in spring-rice-startup.xml -->
  
  <!-- Configuring Oracle to support XA:
       http://www.time4tea.net/wiki/display/MAIN/Proper+XA+Transactions+With+Oracle+and+Spring         
       http://ourcraft.wordpress.com/2008/08/18/xa-jndi-and-bitronix-part-2-jdbc/
    -->
  <bean id="dataSource" class="bitronix.tm.resource.jdbc.PoolingDataSource" init-method="init" destroy-method="close">
    <property name="className" value="${xadatasource.class}" /> 
    <!-- <property name="uniqueName" value="${bitronix.uniqueName}" /> -->
    <!-- <property name="uniqueName" value="bitronix-test-oracle" /> -->
    <property name="uniqueName" value="kfsDataSource" />
    <property name="maxPoolSize" value="${datasource.pool.maxSize}" />
    <property name="minPoolSize" value="${datasource.pool.minSize}" />
    <property name="useTmJoin" value="true" />
    <property name="testQuery" value="${datasource.validating.query}" />
    <property name="allowLocalTransactions" value="true" />
    <property name="shareTransactionConnections" value="true" />
    <property name="enableJdbc4ConnectionTest" value="true" />
    <!-- without disabling automatic enlisting, Oracle throws ora-02089
         I assume it's because Spring declarative transactions is performing its own enlistment 
         http://www.oracleerrorcodes.com/oracle-database-error-code-ora-02089-commit-is-not-allowed-in-a-subordinate-session/
    -->
    <property name="automaticEnlistingEnabled" value="true"/>
    <!-- <property name="acquisitionTimeout" value="${bitronix.acquisitionTimeout}"/> -->
   <!--  <property name="maxIdleTime" value="${bitronix.maxIdleTime}"/>  -->
    <property name="driverProperties">
      <props>
      	<prop key="driverClassName">${datasource.driver.class}</prop>
      	<prop key="url">${datasource.url}</prop>
        <prop key="user">${datasource.username}</prop>
        <prop key="password">${datasource.password}</prop>
      </props>
    </property>
  </bean>
  
  <!-- Override the Rice server datasource -->
  <bean id="serverDatasource" parent="dataSource">
    <property name="uniqueName" value="riceDataSource" />
    <property name="testQuery" value="${rice.server.datasource.validating.query}" />
    <property name="driverProperties">
      <props>
        <prop key="driverClassName">${rice.server.datasource.driver.class}</prop>
        <prop key="url">${rice.server.datasource.url}</prop>
        <prop key="user">${rice.server.datasource.username}</prop>
        <prop key="password">${rice.server.datasource.password}</prop>
      </props>
    </property>
  </bean>
</beans>
